name: Build & Deploy PlsPostProcessor

on:
  push:
    branches: [ main, test, dev ]
  pull_request:
    branches: [ main, test, dev ]

env:
  DOTNET_VERSION: '4.8.x'
  SOLUTION_FILE_PATH: "./PLS Post Processor.sln"
  PROJECT_FILE_PATH: "./PLS Post Processor/PLS Post Processor.csproj"
  BUILD_CONFIGURATION: Release
  OUTPUT_PATH: "./Publish/PLSPostProcessor"

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    # Ensure the correct .NET SDK is available
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '5.x' # Use a compatible .NET SDK version for .NET Framework 4.8

    - name: Restore dependencies
      run: dotnet restore "${{ env.SOLUTION_FILE_PATH }}"
      continue-on-error: true # Continue to the next step even if restore fails

    - name: Check for restore errors
      if: failure()
      run: |
        echo "Restore failed. Checking for errors..."
        cat $(System.DefaultWorkingDirectory)/_temp/*.log

    - name: Build
      run: dotnet build "${{ env.SOLUTION_FILE_PATH }}" --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Publish
      run: dotnet publish "${{ env.SOLUTION_FILE_PATH }}" --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output "${{ env.OUTPUT_PATH }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: published-files
        path: ${{ env.OUTPUT_PATH }}

    - name: View Environment
      run: |
        echo "DOTNET_VERSION = ${{ env.DOTNET_VERSION }}"
        echo "SOLUTION_FILE_PATH = ${{ env.SOLUTION_FILE_PATH }}"
        echo "PROJECT_FILE_PATH = ${{ env.PROJECT_FILE_PATH }}"
        echo "BUILD_CONFIGURATION = ${{ env.BUILD_CONFIGURATION }}"

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: published-files
          path: ${{ env.OUTPUT_PATH }}

      - name: Deploy based on branch
        shell: pwsh
        run: |
          $branch = "${{ github.ref }}"
          $deployPath = ""

          if ($branch -eq "refs/heads/main") {
            $deployPath = "C:\Deployments\Production"
          } elseif ($branch -eq "refs/heads/test") {
            $deployPath = "C:\Deployments\Test"
          } elseif ($branch -eq "refs/heads/dev") {
            $deployPath = "C:\Deployments\Development"
          }

          echo "deployPath = $deployPath"

          if ($deployPath -ne "") {
            try {
              # Create directory if it doesn't exist
              if (!(Test-Path $deployPath)) {
                New-Item -ItemType Directory -Path $deployPath -Force
              }

              # Copy published files - only copies within the virtual machine
              Copy-Item -Path "${{ env.OUTPUT_PATH }}"\* -Destination $deployPath -Recurse -Force

              Write-Host "Deployed to: $deployPath"
            } catch {
              Write-Error "Deployment failed: $_"
            }
          }